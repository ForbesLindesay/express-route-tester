{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","node_modules/date-now/index.js","node_modules/debounce/index.js","node_modules/isarray/index.js","node_modules/path-to-regexp/index.js"],"names":["escape","str","replace","hide","selector","elements","document","querySelectorAll","i","length","style","display","show","update","keys","regexp","pathRegexp","_","value","textContent","toString","innerHTML","map","key","name","optional","join","updatePath","path","test","result","exec","require","debounce","querySelector","bind","addEventListener","now","Date","getTime","module","exports","func","wait","immediate","later","last","timestamp","timeout","setTimeout","apply","context","args","this","arguments","callNow","Array","isArray","arr","Object","prototype","call","parse","options","res","tokens","index","defaultDelimiter","delimiter","PATH_REGEXP","m","escaped","offset","slice","next","prefix","capture","group","modifier","asterisk","push","partial","repeat","pattern","escapeGroup","escapeString","substr","compile","tokensToFunction","encodeURIComponentPretty","encodeURI","c","charCodeAt","toUpperCase","encodeAsterisk","matches","RegExp","obj","opts","data","encode","pretty","encodeURIComponent","token","segment","TypeError","isarray","JSON","stringify","j","attachKeys","re","flags","sensitive","regexpToRegexp","groups","source","match","arrayToRegexp","parts","pathToRegexp","stringToRegexp","tokensToRegExp","strict","end","route","endsWithDelimiter"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar pathRegexp = require('path-to-regexp');\nvar debounce = require('debounce');\n\nvar _ = document.querySelector.bind(document);\n\nfunction escape(str) {\n  return (str) ? str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\\"/g, '&quot;') : '--';\n}\nfunction hide(selector) {\n  var elements = document.querySelectorAll(selector);\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].style.display = 'none';\n  }\n}\nfunction show(selector) {\n  var elements = document.querySelectorAll(selector);\n  for (var i = 0; i < elements.length; i++) {\n    elements[i].style.display = null;\n  }\n}\n\n_('#inputRoute').addEventListener('input', debounce(update, 100), false);\n_('#inputPath').addEventListener('input', debounce(updatePath, 100), false);\n\nvar keys, regexp;\nfunction update() {\n  keys = [];\n  regexp = pathRegexp(_('#inputRoute').value, keys);\n  _('#regexp-display').textContent = regexp.toString();\n  if (keys.length) {\n    _('#keys-display').innerHTML = '<ol>' + keys.map(function wrap(key) {\n      return '<li>' + escape(key.name) + (key.optional ? ' (optional)' : '') + '</li>';\n    }).join('') + '</ol>';\n  } else {\n    _('#keys-display').innerHTML = 'There are no keys captured by this route';\n  }\n  updatePath();\n}\nfunction updatePath() {\n  var path = _('#inputPath').value;\n  if (regexp.test(path)) {\n    hide('.is-not-match');\n    show('.is-match');\n    var result = regexp.exec(path);\n    _('#keys-results-display').innerHTML = '<dl class=\"dl-horizontal\">' + keys.map(function (key, i) {\n      return '<dt>' + escape(key.name) + '</dt><dd>' +\n      escape(result[i + 1]) + '</dd>';\n    }).join('') + '</dl>';\n  } else {\n    show('.is-not-match');\n    hide('.is-match');\n  }\n}\nupdate();\n","module.exports = Date.now || now\n\nfunction now() {\n    return new Date().getTime()\n}\n","\n/**\n * Module dependencies.\n */\n\nvar now = require('date-now');\n\n/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing.\n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = now() - timestamp;\n\n    if (last < wait && last > 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n      }\n    }\n  };\n\n  return function debounced() {\n    context = this;\n    args = arguments;\n    timestamp = now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n};\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n"]}
